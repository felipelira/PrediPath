#!usr/bin/env python

# usage :  ident_kmer.py [fasta file with kmers] [directory containing gff]

import sys
import os
from Bio import SeqIO

dict_infile = {}

dict_gff_CDS = {}
dict_gff_gene = {}

infile = os.path.realpath(sys.argv[1]) # fasta file containing the kmers processed by cd-hit-est
indir = os.path.realpath(sys.argv[2]) # directory containing the *.gff file
fasta = SeqIO.parse(open(infile, "r") , "fasta")
seq = 0

#extract and store the information from the sequences descriptions in fasta file generated by Skif_with_DSK: name and coordinates
for record in fasta:
	seq =  seq + 1
	#print ">" + record.id + ' ' +  str(seq) + '\n' + str(record.seq) + '\n' 
	genome_id = "_".join(record.description.strip().split("_")[0:2])
	start = record.description.strip().split("_")[-2]
	stop = record.description.strip().split("_")[-1]
	dict_key = "|".join([genome_id,str(seq)])
	#coords = [start, stop]
	coords = range(int(start), int(stop) + 1)
	#print coords
	if genome_id not in	dict_infile:
		dict_infile[dict_key] = coords
	else:
		dict_infile[dict_key].append(coords)
#print sorted(dict_infile)
#for k, v in sorted(dict_infile.iteritems()):
	#print k, v

for gff in os.listdir(indir):
	if gff.startswith("GCF_000020205"): # include gff file
		gff_content = open( os.path.join(indir,gff), "r")
		for line in gff_content:
			if line.startswith("#"):
				pass

			elif "Protein Homology" in line and "CDS" in line:
				genome_ref = line.strip().split("\t")[0]
				stt = line.strip().split("\t")[3]
				stp = line.strip().split("\t")[4]
				product = line.strip().split("\t")[-1].split(";")[-3].replace("product=","")
				prot_id = line.strip().split("\t")[-1].split(";")[-2].replace("protein_id=","")
				key = "|".join([genome_ref , prot_id])
				list_ids = [range(int(stt), int(stp) + 1), prot_id, product]
				if genome_ref not in dict_gff_CDS:
					dict_gff_CDS[key] = list_ids
				else:
					dict_gff_CDS[key].append(list_ids)

#detect the gene which corresponds the longmer
for k, v in sorted(dict_infile.iteritems()):
	genome_id = k.split("|")[0]
	rango = v
	#print genome_id
	for l , m in dict_gff_CDS.iteritems():
		genome_gff = l.split("|")[0]
		if genome_id == genome_gff:	
			#print l.split("|")[0] , m[0]
			try: 
				kmer = [x for x in rango if x in m[0] ]
				if len(kmer) == len(rango):
					print k, l, m[2] #,  v, rango,'\n' , 
			except:
				pass






